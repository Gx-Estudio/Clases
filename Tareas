--Clase 1
-- Programar la funcion esPitagorica que tome tres parametros a b c y diga si existe un triangulo rectangulo donde a y b sean las medidas de los catetos y c la de la hipotenusa
esPitagorica a b c = a^2 + b^2 == c^2 && a>0 && b>0 && c>0
-- esPitagorica a b c = abs (a^2 + b^2 - c^2) < 0.000001 && a>0 && b>0 && c>0


--Clase 2
--Implementar la funcion
--pendiente:: (Float,Float) -> (Float,Float) -> Float
--que toma dos puntos y calcula la pendiente de la recta que pasa por esos puntos.
pendiente:: (Float,Float) -> (Float,Float) -> Float
pendiente a b = (snd(a)-snd(b)) / (fst(a)-fst(b))


--Clase 3
--Suma de impares de 1 hasta b^2 < n
sumaImparesCuadradosMenoresA:: Float -> Integer
sumaImparesCuadradosMenoresA n | n>0 = sum [1,3..truncate (sqrt n)]


--Clase 4
--calcula el producto interno entre dos listas del mismo tamaÃ±o, pensadas como vectores en R^n
prodInterno :: [Float] -> [Float] -> Float
prodInterno a b | length a == 0 && length b == 0 = 0
prodInterno a b | otherwise = head a * head b + prodInterno (tail a) (tail b)


--Clase5
--Lista creciente
esCreciente :: [Integer] -> Bool
esCreciente a | length a == 1 = True
esCreciente a | head a <= head(tail a) = esCreciente (tail a)
esCreciente a | otherwise = False
--Lista decreciente
esDecreciente :: [Integer] -> Bool
esDecreciente a | length a == 1 = True
esDecreciente a | head a >= head(tail a) = esDecreciente (tail a)
esDecreciente a | otherwise = False
--Ver si una lista esta ordenada osea si la lista es (creciente o decreciente)
estaOrdenada :: [Integer] -> Bool
estaOrdenada a | a==[] = True
estaOrdenada a | esDecreciente a || esCreciente a = True
estaOrdenada a | otherwise = False

--Clase 7
--Factoriza un numero compuesto en sus primos
--Primos
divisoresHasta :: Integer -> Integer -> [Integer]
divisoresHasta n m | m==1 = [1]
divisoresHasta n m | mod n m == 0 = m:divisoresHasta n (m-1)
divisoresHasta n m | otherwise = divisoresHasta n (m-1)

divisores :: Integer -> [Integer]
divisores n = divisoresHasta n n

primo :: Integer -> Bool
primo n = length (divisores n) == 2

--Primos hasta n
primosHasta :: Integer -> [Integer]
primosHasta n | n == 1 = []
primosHasta n | primo n = primosHasta (n-1) ++ [n]
primosHasta n | not (primo n) = primosHasta (n-1)

--Busca ultimo primo que divide a "n" de la lista "primosHasta n"
busca :: Integer -> [Integer]
busca n 


factorizar :: Integer -> [Integer]
factorizar 1 = []
--factorizar n = busca n (primosHasta n)
