--Nota: [a,b..c] es la lista desde a, con razon a-b hasta c
listar :: a -> a -> a -> [a]
listar a b c = [a,b,c]

--va desde "a" con rango "c" hasta el "b"
rangoDePaso :: Integer -> Integer -> Integer -> [Integer]
rangoDePaso a b c = [a,a+c..b]

--head = cabeza, tail solo cuerpo (sin cabeza)

-- 1:[2,3]	-> [1,2,3]
-- 3:[]		-> [3]
-- 1:2:3:[]	-> [1,2,3]
-- [1,2]:[]	-> [[1,2]]

-- [1,3] ++ [2,5]	-> [1,3,2,5]
-- 2 ++ [2,5]		-> Nada porq 2 no es lista

--length (cantidad de elementos)
--reverse (le da vuelta a la lista)

factorial :: Int -> Int
factorial n | n == 0 = 1
factorial n | n > 0 = n * factorial (n-1)

--Programando Fibonacci
fib :: Integer -> Integer
fib n | n == 0 = 1
fib n | n == 1 = 1
fib n | n > 1 = (fib (n-1)) + (fib (n-2))

--Suma de los elementos de una lista
suma :: [Integer] -> Integer
suma lista | length lista == 0 = 0
suma lista | otherwise = head lista + suma (tail lista)

productoria :: [Integer] -> Integer
productoria lista | length lista == 0 = 0
productoria lista | length lista == 1 = head lista
productoria lista | otherwise = head lista * productoria (tail lista)

--last (ultimo de la lista)
--init (la lista menos el ultimo)
reverso :: [a] -> [a]
reverso lista | length lista == 0 = []
reverso lista | length lista > 0 = reverso (tail lista) ++ [head lista]


capicua :: (Eq a) => [a] -> Bool
capicua xs = reverso xs == xs
